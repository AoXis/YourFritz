#! /bin/dash
#######################################################################################################
#                                                                                                     #
# rewritten JUIS update check to circumvent "bash" and "xmllint" use, avoid "wget" and use "nc" for   #
# network activities, now only using POSIX compliant shell constructs - should be usable with 'dash'  #
# now                                                                                                 #
#                                                                                                     #
# prerequisites:                                                                                      #
# - configuration file                                                                                #
# - FRITZ!Box router (usually)                                                                        #
# - a BusyBox with mktemp (opt.), dd, sed, base64, nc                                                 #
# - it should be possible now to use a more limited shell like 'dash' instead of 'ash', as long as    #
#   the provided 'nc' command knows the '-i' option to assure there's time for the server to reply    #
#                                                                                                     #
#######################################################################################################
#                                                                                                     #
# Copyright (C) 2010-2016 P.HÃ¤mmerlein (peterpawn@yourfritz.de)                                       #
#                                                                                                     #
# This program is free software; you can redistribute it and/or modify it under the terms of the GNU  #
# General Public License as published by the Free Software Foundation; either version 2 of the        # 
# License, or (at your option) any later version.                                                     #
#                                                                                                     #
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without   #
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU      #
# General Public License under http://www.gnu.org/licenses/gpl-2.0.html for more details.             #
#                                                                                                     #
#######################################################################################################
#                                                                                                     #
# calling:                                                                                            #
#                                                                                                     #
# juis_check [-d|--debug] [optional parameters]                                                       #
#                                                                                                     #
# The script attempts to read a configuration file with the name "juis_check.cfg" from the same       #
# location, where the script itself was found.                                                        #
#                                                                                                     #
# This configuration file may set one or more positional parameters according to the current task and #
# has to use the "shift" command to remove processed parameters from the command line.                #
#                                                                                                     #
# The following special names are known as usable settings:                                           #
#                                                                                                     #
# name       meaning                                                                                  #
#                                                                                                     #
# Serial     the serial number of the FRITZ!Box device (usually the same as "maca")                   #
# Version    the firmware version to be assumed as the currently running one                          #
# Name       the product name                                                                         #
# HW         the hardware revision                                                                    #
# OEM        the OEM value used (aka the "branding")                                                  #
# Lang       the current language set                                                                 #
# Annex      the used annex for the DSL modem or "Kabel" for DOCSIS devices                           #
# Country    the ITU recommended country code (E.164)                                                 #
# Public     '1' to check only for public versions, '0' to accept 'inhouse builds' instead            #
#                                                                                                     #
# Any missing setting will be read from the FRITZ!Box router, which address or name is contained in   #
# the variable 'Box'. Only if all needed settings are provided otherwise, this read attempt is        #
# skipped.                                                                                            #
#                                                                                                     #
# Each setting may be specified with the keyword "detect" (it has the same meaning as a missing       #
# entry), a setting with this state will be read from the FRITZ!Box router. If the keyword "empty" is #
# used, the parameter will be set to an empty string, but is seen as "present" and not read from the  #
# device. If the keyword "fixed:" is used at the beginning of the value (or if any other keyword is   #
# absent), the string after the colon is used as the parameter value. If you want to use a parameter  #
# starting with the string "detect", you have to use "fixed:detect" to provide it the right way.      #
#                                                                                                     #
# This script is only usable with the new JasonUpdateInfoService from AVM ... earlier versions using  #
# the old interface may be checked with another script (try looking around a bit).                    #
#                                                                                                     #
# If your configuration file contains the following lines:                                            #
#                                                                                                     #
# Box=$1                                                                                              #
# shift                                                                                               #
#                                                                                                     #
# the IP address of the FRITZ!Box to be used to get missing settings is set to the first parameter    #
# specified on the command line and this parameter is then "shift"ed away. All other settings are     #
# read from the jason_boxinfo.xml file of the specified device.                                       #
#                                                                                                     #
# After the configuration file was processed, any remaining command line parameters are treated as    #
# name-value pairs, overwriting settings read from file or device.                                    #
#                                                                                                     #
# If an error occurs, an exit code of 2 will be returned. If no newer version was found, the exit     #
# code is set to 1 and only if a newer version was found, an exit code of 0 is used. In this case     #
# the URL, where the new version can be loaded from, is written to "stdout" prefixed with "URL=".     #
#                                                                                                     #
# If the optional "debug" option is present, the sent request and the received answer will be written #
# to STDERR.                                                                                          #
#                                                                                                     #
#######################################################################################################
#                                                                                                     #
# constants                                                                                           #
#                                                                                                     #
#######################################################################################################
settings="Serial Version Name HW OEM Lang Annex Country Public"
variables="Serial Major Minor Patch Build Name HW OEM Lang Annex Country Public"
hostbase="jws.avm.de"
juisport=80
juisurl="/Jason/UpdateInfoService"
contenttype="text/xml; charset=\"utf-8\""
headerline_0="POST %s HTTP/1.1\r\n"
headerline_1="Host: %s:%u\r\n"
headerline_2="Content-Length: %u\r\n"
headerline_3="Content-Type: %s\r\n"
headerline_4="Connection: close\r\n"
body_tmpl="<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:soap-enc=\"http://schemas.xmlsoap.org/soap/encoding/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:e=\"http://juis.avm.de/updateinfo\" xmlns:q=\"http://juis.avm.de/request\"><soap:Header/><soap:Body><e:BoxFirmwareUpdateCheck><e:RequestHeader><q:Nonce>%s</q:Nonce><q:UserAgent>Box</q:UserAgent><q:ManualRequest>true</q:ManualRequest></e:RequestHeader><e:BoxInfo><q:Name>%s</q:Name><q:HW>%s</q:HW><q:Major>%s</q:Major><q:Minor>%s</q:Minor><q:Patch>%s</q:Patch><q:Buildnumber>%s</q:Buildnumber><q:Buildtype>%s</q:Buildtype><q:Serial>%s</q:Serial><q:OEM>%s</q:OEM><q:Lang>%s</q:Lang><q:Country>%s</q:Country><q:Annex>%s</q:Annex><q:Flag></q:Flag><q:UpdateConfig>1</q:UpdateConfig><q:Provider>oma_lan</q:Provider></e:BoxInfo></e:BoxFirmwareUpdateCheck></soap:Body></soap:Envelope>"
#######################################################################################################
#                                                                                                     #
# subfunctions                                                                                        #
#                                                                                                     #
#######################################################################################################
#                                                                                                     #
# extract result variables from JUIS answer                                                           #
#                                                                                                     #
#######################################################################################################
extract_xml()
{
	local input="$1" ns="$2" tag="$3"
	sed -n -e "s|.*<$ns:$tag>\(.*\)</$ns:$tag>.*|\1|p" $input
}
#######################################################################################################
#                                                                                                     #
# read jason_boxinfo.xml from a FRITZ!Box device                                                      #
#                                                                                                     #
#######################################################################################################
jason_read()
{
	local ip="$1" port="$2"
	printf "GET /jason_boxinfo.xml HTTP/1.0\r\n\r\n" | nc -i 1 $ip $port
	return $?
}
#######################################################################################################
#                                                                                                     #
# make temporary directory or file, emulate 'mktemp' if it's missing                                  #
#                                                                                                     #
#######################################################################################################
mktmp()
{
	local name="$(mktemp $*)"
	if [ $? -eq 127 ]; then # mktemp is missing, emulation needed
		local dir tmp="$TMP"
		[ "$1" = "-d" ] && dir=1 || dir=0
		[ "$1" = "-p" ] && tmp="$2"
		[ -z "$tmp" ] && tmp="/var/tmp"
		name="$tmp/$(date +%s)_$$"
		if [ $dir -eq 1 ]; then
			if [ -d "$name" ]; then
				name="$name_$(dd if=/dev/urandom bs=8 count=1 2>/dev/null | base64 | sed -e "s|[^A-Za-z0-9]*||g")"
			fi
			mkdir -p "$name" 2>/dev/null
		else
			touch $name 2>/dev/null
		fi
	fi
	printf "$name"
}
#######################################################################################################
#                                                                                                     #
# check debug option                                                                                  #
#                                                                                                     #
#######################################################################################################
if [ "$1" = "-d" -o "$1" = "--debug" ]; then
	debug=1
	shift
else
	debug=0
fi
#######################################################################################################
#                                                                                                     #
# process configuration file                                                                          #
#                                                                                                     #
#######################################################################################################
if ! [ -f "$0.cfg" ]; then
	printf "Missing configuration file '%s.cfg'.\n" "$0" 1>&2
	exit 2
fi
. $0.cfg
#######################################################################################################
#                                                                                                     #
# prepare temporary directory and cleanup on exit                                                     #
#                                                                                                     #
#######################################################################################################
td="$(mktmp -d)"
trap 'rm -rf "$td" 2>/dev/null' EXIT INT HUP
#######################################################################################################
#                                                                                                     #
# check and set parameters                                                                            #
#                                                                                                     #
#######################################################################################################
detect=0
for n in $settings; do
	[ $n = Public ] && continue
	eval var="\$$n"
	if [ -z "$var" -o "$var" = "detect" ]; then
		detect=1
		break
	fi
done
if [ $detect -eq 1 ]; then
	if [ -z "$Box" ]; then
		printf "Missing FRITZ!Box IP address.\n" 1>&2
		exit 2
	fi
	jason_boxinfo="$(mktmp -p $td)"
	jason_read "$Box" 80 2>/dev/null >"$jason_boxinfo"
	if [ $? -ne 0 ]; then
		printf "Error reading jason info from FRITZ!Box device with address '%s'.\n" "$Box" 1>&2
		exit 2
	fi
fi
for n in $settings; do
	eval var="\$$n"
	# missing definitions will be auto-detected
	if [ "$var" = "empty" ]; then
		[ $n = Public ] && Public=1 || eval $n=""
	elif [ "${var#fixed:}" != "$var" ]; then
		eval $n="${var#fixed:}"
	elif [ $n = Public ]; then
		if ! [ -z "$var" ]; then
			if [ "$var" != "0" -a "$var" != "1" ]; then
				printf "'Public' item may only be empty or set to a fixed value.\n" 1>&2
				exit 2
			else
				Public=$var
			fi
		else
			Public=1
		fi
	elif [ -z "$var" -o "$var" = "detect" ]; then
		val="$(extract_xml "$jason_boxinfo" "j" $n)"
	 	eval $n='$val'	
	else
		eval $n="$var"
	fi
	if [ $n = Version ]; then
		Major="${Version%%.*}"
		Minor="${Version#*.}"
		Patch="${Minor#*.}"
		Build="${Patch#*-}"
		[ "$Build" = "$Patch" ] && Build="" || Patch="${Patch%%-*}"
		Minor=$(( ${Minor%%.*} ))
		[ -z "$Build" -a $detect -eq 1 ] && Build="$(extract_xml "$jason_boxinfo" "j" Revision)"
	fi
done
#######################################################################################################
#                                                                                                     #
# process additional command line settings                                                            #
#                                                                                                     #
# - configuration file options may be overwritten with "name=value" tupels from command line          #
#                                                                                                     #
#######################################################################################################
for nv in $*; do
	name="${nv%%=*}"
	value="${nv#*=}"
	valid=0
	for n in $settings; do
		if [ $n = "$name" ]; then
			if [ "$value" = "empty" ]; then
				eval $n=""
			else
				eval $n="$value"
			fi
			valid=1
			break
		fi
	done
	if [ $valid -eq 0 ]; then
		printf "Unknown setting '%s' found at command line.\n" "$name" 1>&2
		exit 2
	fi
	if [ $name = Version ]; then
		Major="${Version%%.*}"
		Minor="${Version#*.}"
		Patch="${Minor#*.}"
		Build="${Patch#*-}"
		Patch="${Patch%%-*}"
		Minor=$(( ${Minor%%.*} ))
	fi
done
#######################################################################################################
#                                                                                                     #
# prepare additional variables                                                                        #
#                                                                                                     #
#######################################################################################################
if [ "$Public" != "0" -a "$Public" != "1" ]; then
	printf "The 'Public' item has to be set to '0' for 'inhouse versions' or '1' for others.\n" 1>&2
	exit 2
fi
type="100$Public"
hostname=$HW.$hostbase
nonce=$(dd if=/dev/urandom bs=16 count=1 2>/dev/null | base64)
#######################################################################################################
#                                                                                                     #
# show debug info regarding final variable content                                                    #
#                                                                                                     #
#######################################################################################################
if [ $debug -eq 1 ]; then
	printf "===================================\nVariables set:\n\n" 1>&2
	for n in $variables type hostname nonce; do
		printf "%s=\"" "$n" 1>&2
		printf "%s\"\n" $(eval printf "%s" \$$n) 1>&2
	done
	printf "\n" 1>&2
fi
#######################################################################################################
#                                                                                                     #
# prepare temporary files for the check request                                                       #
#                                                                                                     #
#######################################################################################################
body="$(mktmp -p $td)"
header="$(mktmp -p $td)"
response="$(mktmp -p $td)"
printf "$body_tmpl" "$nonce" "$Name" "$HW" "$Major" "$Minor" "$Patch" "$Build" "$type" "$Serial" "$OEM" "$Lang" "$Country" "$Annex" >>"$body"
len=$(stat -c %s "$body")
printf "$headerline_0" "$juisurl" >>"$header"
printf "$headerline_1" "$hostname" $juisport >>"$header"
printf "$headerline_2" $len >>"$header"
printf "$headerline_3" "$contenttype" >>"$header"
printf "$headerline_4" >>"$header"
if [ $debug -eq 1 ]; then
	printf "===================================\nSent request:\n" 1>&2
	cat "$header" 1>&2
	printf "\r\n" 1>&2
	cat "$body" 1>&2
	printf "\n" 1>&2
fi
#######################################################################################################
#                                                                                                     #
# execute SOAP request                                                                                #
#                                                                                                     #
#######################################################################################################
(cat "$header"; printf "\r\n"; cat "$body" ) | nc -i 1 $hostname $juisport >"$response"
if [ $debug -eq 1 ]; then
	printf "===================================\nReceived response:\n" 1>&2
	cat $response 1>&2
	printf "\n" 1>&2
	printf "======= end of debug output =======\n" 1>&2
fi
#######################################################################################################
#                                                                                                     #
# examine the status code                                                                             #
#                                                                                                     #
#######################################################################################################
status="$(sed -n -e "1p" "$response" | sed -n -e "s|HTTP/1.1 \([0-9]*\) OK.*|\1|p")"
if [ -z "$status" ]; then
	printf "Unexpected data received from network.\n" 1>&2
	exit 2
elif [ "$status" != "200" ]; then
	printf "Unexpected error code %s returned from jws.avm.de.\n" "$status" 1>&2
	exit 2
fi
#######################################################################################################
#                                                                                                     #
# examine the response and show the result                                                            #
#                                                                                                     #
#######################################################################################################
xmlresp="$(mktmp -p $td)"
sed -n -e "\$p" "$response" >"$xmlresp"
found="$(extract_xml "$xmlresp" "ns3" "Found")"
if [ "$found" != "true" ]; then
	printf "No newer version found, check was made with source version '%s'.\n" "$Version" 1>&2
	exit 1
fi
URL="$(extract_xml "$xmlresp" "ns3" "DownloadURL")"
Version="$(extract_xml "$xmlresp" "ns3" "Version")"
printf "Found newer version : %s\n" "$Version" 1>&2
printf "URL=$URL\n"
#######################################################################################################
#                                                                                                     #
# end of script                                                                                       #
#                                                                                                     #
#######################################################################################################
exit 0
